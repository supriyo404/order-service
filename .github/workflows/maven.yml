name: Java CI with Maven

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:
  Checkout:
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
    steps:
      - name: Checkout Code
        uses: actions/checkout

  setup-env:
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false

    steps:
    - name: Set up JDK 17
      uses: actions/setup-java
      with:
        java-version: '17'
        distribution: 'temurin'
    - name: Cache Maven packages
      uses: actions/cache
      with:
        path: ~/.m2/repository
        key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}
        restore-keys: |
          ${{ runner.os }}-maven-
  Scan-and-report:
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
    steps:
    - name: Compile the project
      run: mvn compile
      
# Checkstyle
    - name: Checkstyle
      run: sudo apt-get update && sudo apt-get install checkstyle
    - name: Checkstyle run
      run: mvn checkstyle:check || true  # Allow failures for now (|| true)

# Coverage Report (replace with your coverage tool)

      # SonarQube Scan
    - name: SonarQube Scan
      env:
        SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
      run: mvn sonar:sonar -Dsonar.projectKey=${{ secrets.SONAR_PROJECT_KEY }} -Dsonar.organization=${{ secrets.SONAR_ORGANIZATION }} -Dsonar.host.url=${{ secrets.SONAR_HOST_URL }} -Dsonar.login=${{ secrets.SONAR_TOKEN }} || true
  Build-and-test:
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
    steps:
      # Unit Tests (replace with your test command)
    - name: Run Unit Tests
      run: mvn test || true  # Allow failures for now (|| true)

      # Coverage Report (replace with your coverage tool)

    - name: Build with Maven
      run: mvn clean package -DskipTests

  Docker:
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
    steps:
    - name: Build Docker image
      run: docker build -t ${{ secrets.IMAGE_ID }}:latest .

    - name: Login to JFrog Artifactory using token
      env:
        ARTIFACTORY_URL: ${{ secrets.ARTIFACTORY_URL }}
        ARTIFACTORY_TOKEN: ${{ secrets.ARTIFACTORY_TOKEN }}
      run: |
          echo $ARTIFACTORY_TOKEN | docker login $ARTIFACTORY_URL --username ${{ secrets.JFROG_USER }} --password-stdin
          docker login $ARTIFACTORY_URL --username ${{ secrets.JFROG_USER }} --password $ARTIFACTORY_TOKEN

    - name: Push Docker image to JFrog Artifactory
      run: docker push $IMAGE_ID:latest
      env:
          ARTIFACTORY_URL: ${{ secrets.ARTIFACTORY_URL }}
          IMAGE_ID: ${{ secrets.IMAGE_ID }}

